name: "c++ test"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  CoreTest:
    name: cpp test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-python@v2
      - name: install requirement
        run: |
          sudo apt -qq -y update
          sudo apt -qq install clang-tidy-10 clang-format-10
      - name: git
        run: |
          git config --global user.name github.actions
          git config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
      - name: format filename
        run: |
          IFS=$'\n'
          for fname in `find . -type f -name '*.cpp' -o -name '*.cc' -o -name '*.h'`
          do 
            echo "${fname}"
            new_fname=`echo ${fname} | tr ' ' '_'`
            echo "      ${new_fname}"
            new_fname=`echo ${new_fname} | tr 'A-Z' 'a-z'`
            echo "      ${new_fname}"
            new_fname=`echo ${new_fname} | tr '-' '_'`
            echo "      ${new_fname}"
            new_fname=${new_fname/.cc/.cpp}
            echo "      ${new_fname}"
            if [ ${fname} != ${new_fname} ]
            then
              echo "      ${fname} --> ${new_fname}"
              git "mv" "${fname}" ${new_fname}
            fi
          done
          git commit -am "formatting filenames ${GITHUB_SHA::8}" ||  true
       name: take changed file
        run: |
          git remote -v
          git branch
          git remote set-url origin https://x-acces-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git diff --diff-filter=dr --name-only origin/master > git_diff.txt
          echo "file diubah-- `cat git_diff.txt`" 
      - name: static lint config
        run: cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      - name: lint commited file
        shell: python
        run: |
          import os
          import subprocess
          import sys
          
          print("python {}.{}.{}".format(*sys.version_info))
          with open("git_diff.txt") as in_file:
            modified_files = sorted(in_file.read().splitlines())
          print("{} file sudah dimodifikasi".format(len(modified_files)))
          cpp_exts = tuple(".c .c++ .cc .cpp. cu .cuh. .cxx .h .h++ .hh .hpp .hxx".split())
          cpp_files = [file for file in modified_files if file.lower().endswith(cpp_exts)]
          print(f"{len(cpp_files)} c++ file sudah dimodifikais")
          if not cpp_files:
            sys.exit(0)
          
          subprocess.run(["clang-tidy-19", "--fix", "-p=build", "--extra-arg=c++11","*cpp_files", "--"],
              check = True, text = True, strderr=subprocess.STDOUT)
          subprocess.run(["clang-format-10", "--fix", "-p=build", "extra-arg=c++11", "*cpp_files", "--"],
              check = True, text = True, stderr=subprecess.STDOUT)
          
          upper_files = [file for file in cpp_files if file != file.lower()]
          if upper_files:
            print(f"{len(upper_files)} file file containing uppercase")
            print("\n".join(upper_files) + "\n")
          space_files = [file for file in cpp_files if " " in file or "-" in file]
          if space_files:
            print(f"{len(space_files)} file containing space or center line")
            print(f"\n".join(space_files) + "\n")
          
          nodir_files = [file for file in cpp_files if file.count(os.sep) != 1]
          if nodir_files:
            print(f"{len(nodir_files)} file is none")
            print("\n".join(nodir_files) + "\n")
          
          bad_files = len(upper_files + space_files + nodir_files)
          if bad_files:
            sys.exit(bad_files)
      
      - name: commit
        run: |
          git commit -am "clang formatter and clang-tidy fixing ${GITHUB_SHA:8}" || true
          git push --force origin HEAD:$GITHUB_REF || true 
        
  build:
    name: compile checking
    runs-on: ${{ matrix.os }}
    needs: [CoreTest]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
    - uses: actions/checkout@master
      with:
        submodules: true
    - run: cmake -B ./build -S .
    - run: cmake --build build
